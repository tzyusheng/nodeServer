'use strict'

let fs = require('fs');
let HttpClient = require('../').HttpClient;

// 设置request库的一些参数
// request参数请参考 https://github.com/request/request#requestoptions-callback
// HttpClient.setRequestOptions({
//     timeout: 5000,
//     rejectUnauthorized: false,
//     proxy: 'http://127.0.0.1:8888',
//     ca: fs.readFileSync('aipNlpTest.js')
// });

// 也可以设置拦截每次请求（设置拦截后，调用的setRequestOptions设置的参数将不生效）,
// 可以按需修改request参数（无论是否修改，必须返回函数调用参数）
// request参数请参考 https://github.com/request/request#requestoptions-callback
HttpClient.setRequestInterceptor(function (requestOptions) {
    // 查看参数
    console.log(requestOptions);
    // 修改参数
    requestOptions.timeout = 5000;
    // 返回参数
    return requestOptions;
});

function getAllscopeClient(clientClass) {
    // WpzmnDNs8LTqu71CedRaASIG
    // jjn2KIPjvm4TlgnpcbZShysfGcIAhI1L
    // oY5bKyP0sB5bzlMlQiTVDaoLr66bGG0G
    // G155V1GFA44nQALyW5VrraZfWXtHGXut
    // f9a7a0546c8842ea9b6908712a18c6fd
    // 8bf0875cddd94d99b77b3cde3c17869b
    return new clientClass(12323, 'WpzmnDNs8LTqu71CedRaASIG', 'jjn2KIPjvm4TlgnpcbZShysfGcIAhI1L');
}
let out = {
    createAll: getAllscopeClient
};

module.exports = out;

